Directory structure:
└── abacatepay-abacatepay-java-sdk/
    ├── README.md
    ├── RequestHelp.md
    └── src/
        ├── main/
        │   └── java/
        │       └── com/
        │           └── abacatepay/
        │               ├── AbacatePay.java
        │               ├── clients/
        │               │   ├── AbacatePayClient.java
        │               │   ├── exceptions/
        │               │   │   ├── FeignCustomException.java
        │               │   │   └── handlers/
        │               │   │       ├── ApiExceptionModel.java
        │               │   │       └── CustomExceptionDecoder.java
        │               │   └── factories/
        │               │       └── AbacatePayClientFactory.java
        │               └── model/
        │                   ├── IAbacatePay.java
        │                   ├── IAbacatePayBilling.java
        │                   └── billing/
        │                       ├── Billing.java
        │                       ├── BillingKind.java
        │                       ├── BillingMethod.java
        │                       ├── BillingStatus.java
        │                       ├── CreateBillingData.java
        │                       ├── CreateBillingProduct.java
        │                       ├── CreateBillingResponse.java
        │                       ├── CustomerMetadata.java
        │                       └── ListBillingResponse.java
        └── test/
            └── java/
                └── com/
                    └── abacatepay/
                        ├── AbacatePayTest.java
                        ├── clients/
                        │   └── exceptions/
                        │       └── handlers/
                        │           ├── ApiExceptionModelTest.java
                        │           └── CustomExceptionDecoderTest.java
                        └── model/
                            └── billing/
                                ├── BillingKindTest.java
                                ├── BillingMethodTest.java
                                ├── BillingStatusTest.java
                                ├── BillingTest.java
                                ├── CreateBillingDataTest.java
                                ├── CreateBillingProductTest.java
                                ├── CreateBillingResponseTest.java
                                ├── CustomerMetadataTest.java
                                └── ListBillingResponseTest.java

================================================
FILE: README.md
================================================
# 🥑 **AbacatePay _Java_ SDK**

![Readme Version](https://img.shields.io/badge/version-1.1-blue)  ![Status](https://img.shields.io/badge/status-active-brightgreen) ![License](https://img.shields.io/badge/license-MIT-green) 
---
![Contributors](https://img.shields.io/github/contributors/AbacatePay/abacatepay-java-sdk) 
![Last Commit](https://img.shields.io/github/last-commit/AbacatePay/abacatepay-java-sdk)

Welcome to the official [AbacatePay](https://github.com/AbacatePay) Java SDK repository! This project was created to facilitate integration with the AbacatePay API, providing a robust, modular and easy-to-use SDK. 🍃
<div align="center">
  <img src="https://cdn.discordapp.com/attachments/1133480741876019206/1332413972103565322/OIG2.UhRqOqltmix.jpeg?ex=67952ab6&is=6793d936&hm=23ea047d3577a6bd0e5476739e736b6b9f3276406a6a6538f386e62e82467e75" alt="Imagem" width="300" />
</div>

## 📋 **Table of Contents**

1. [📖Introduction](#Introduction)
	- [📁 Structure of the Repository](#repository-structure)
	- [📂 Main Folders](#main-folders)
2. [🛠️ Components](#components)
	- [📂 `main` package](#main-package)
	- [📂 `billing` package](#billing-package)
	- [📂 `clients` package](#clients-package)
	- [📠 Installation](#installation)
3. [💻 Code Example](#code-example)

----------

## Introduction


The AbacatePay Java SDK is designed for developers who want to integrate the 🥑AbacatePay API into their Java projects ☕. It provides classes and methods to facilitate authentication, handling charges, and communicating with the API in an intuitive and standardized way. Before you start learning, you should know that you can ask the developers of this SDK any questions you may have directly. The practical guide [is here](https://github.com/AbacatePay/abacatepay-java-sdk/blob/main/RequestHelp.md).

----------

### **Repository Structure**

- **Package Director:**
Contains the core of the SDK, including the main modules such as `clients`, `model` and the main class `AbacatePay.java`.

**Location:**
[`src/main/java/com/abacatepay`](https://github.com/DaviJoseMach/abacatepay-java-sdk/tree/main/src/main/java/com/abacatepay)

- **Test Package:**
Contains the automated tests to validate the operation of the SDK functions.

**Location:**
[`src/test/java/com/abacatepay`](https://github.com/DaviJoseMach/abacatepay-java-sdk/tree/main/src/test/java/com/abacatepay)

----------

### **Main Packages**

#### **`main` package**

- [`clients`](https://github.com/DaviJoseMach/abacatepay-java-sdk/tree/main/src/main/java/com/abacatepay/clients):
Defines interfaces for communicating with an API.

- [`model`](https://github.com/DaviJoseMach/abacatepay-java-sdk/tree/main/src/main/java/com/abacatepay/model):
Contains the data models for requests and responses.

- [`AbacatePay.java`](https://github.com/DaviJoseMach/abacatepay-java-sdk/blob/main/src/main/java/com/abacatepay/AbacatePay.java):
The main class that manages authentication and API calls.

#### **`billing` package**

Scripts related to billing, such as creation and listing.

- **Example:** Structures for billing data (e.g. `CreateBillingData`) and API responses (e.g. `CreateBillingResponse`).

#### **`clients` package**

Define interfaces that represent API routes. Example:

```java
@RequestLine("POST /billing/create")
CreateBillingResponse create(body CreateBillingData);

```
Here's what you need to install for it to work properly:

### Installation

1. **Java**: Make sure you have JDK 8 or higher installed on your system.

2. **Maven**: You need Maven to manage dependencies and build the project. If you don't have it, install it with the command:

```bash
sudo apt install maven
```
or 
```bash
choco install maven -y
```

3. **SDK Dependencies**: This SDK uses Feign for HTTP requests. Add the Feign dependency to your `pom.xml`:

```xml
<dependency>
<groupId>io.github.openfeign</groupId>
<artifactId>feign-core</artifactId>
<version>11.7</version>
</dependency>

```

4. **API Configuration**: You need the AvocadoPay API key. - make sure you have it and make sure to pass it as a parameter when instantiating the `AbacatePay` class:

```java
AbacatePay avocadoPay = new AbacatePay("YOUR_API_KEY");

```

## **Code Example**

Below, we explain the main points of the SDK code example:

### Code:

```java
package com.abacatepay;

import com.abacatepay.clients.AbacatePayClient;
import com.abacatepay.clients.factories.AbacatePayClientFactory;
import com.abacatepay.model.billing.CreateBillingData;
import com.abacatepay.model.billing.CreateBillingResponse;
import com.abacatepay.model.billing.ListBillingResponse;
import feign.RequestInterceptor;

public class AvocadoPay {

private static final String API_BASE_URL = "https://api.abacatepay.com/v1";

private final AvocadoPayClient client;

public AvocadoPay(String apiKey) {
if (apiKey == null || apiKey.isEmpty()) {
throw new IllegalArgumentException("API Key not provided");

}
this.client = AvocadoPayClientFactory.create(API_BASE_URL, requestInterceptor(apiKey));

}
private RequestInterceptor requestInterceptor(String apiKey) {
return template -> {
template.header("Authorization ", "Cardholder " + apiKey);
template.header("Content-Type", "application/json");

};

public CreateBillingResponse reateBilling(CreateBillingData data) {
return client.create(data);
}

public ListBillingResponse listBillings() {
return client.list();
}
}

```

### **Code Explanation:**

1. **Base URL Configuration:**

- The API URL (`https://api.abacatepay.com/v1`) is stored in `API_BASE_URL` for easy reuse.

2. **Authentication and Headers:**

- A `RequestInterceptor` automatically adds `Authorization` (with the API key), `Content-Type` and other headers to each request. 3. **AbacatePay Client (`AbacatePayClient`):**

- Created from a factory (`AbacatePayClientFactory`), provides methods for calls such as `create` and `list`.

4. **Creating a Bill (`createBilling`):**

- Sends the billing data (`CreateBillingData`) and returns the response.

5. **Listing Billings (`listBillings`):**

- Makes a request to list billings.



================================================
FILE: RequestHelp.md
================================================
![javaHelp](https://media.discordapp.net/attachments/1133480741876019206/1335694303707664456/Request_Help.png?ex=67acf742&is=67aba5c2&hm=4560a5bb543a6b22941c294e49f7d12b5134ce5a3515b6b370a01f6e3354b992&=&format=webp&quality=lossless&width=1249&height=701)

  

# 🥑 **RequestHelp Java**

  

Have you had any questions about using the Java SDK for **🥑pay**? Please know that we can and are willing to help you on our **discord channel. ☕**



## How do I access it?

  

1. The first step is to access our discord server [Clicking

here](https://discord.gg/x5GJre34vP)

After that look for the **☕Java** channel in the *SDKS category*

-  *I'm not finding it*

Relax, you can also [Click here](https://discord.com/channels/1303726278670553158/1303731639146254386) / to go directly to the channel, **but remember, you need to be on the server**

  

## Help Sending Standard

  

1. First step is to add the day and month you are asking for help e.g. `01/25`

2. Second step is to add a title right after the date e.g. `I'm having trouble with an error or code, etc`

3. If possible, send a printout of what is happening

4. Complete model =

| day/month | Problem title |
|--|--|
| I'm facing the problem of ....... | Reference image |

  

***Final example :***


![enter image description here](https://media.discordapp.net/attachments/1133480741876019206/1335707618689417247/image.png?ex=67ac5ae8&is=67ab0968&hm=bebd5f7556988750520bfbc65c3b717bbd44c16934a8e39735d126cde0b6f760&=&format=webp&quality=lossless)

 

And that's it, now just wait for a response 🥑🛠️




================================================
FILE: src/main/java/com/abacatepay/AbacatePay.java
================================================
package com.abacatepay;

import com.abacatepay.clients.AbacatePayClient;
import com.abacatepay.clients.factories.AbacatePayClientFactory;
import com.abacatepay.model.IAbacatePay;
import com.abacatepay.model.IAbacatePayBilling;
import com.abacatepay.model.billing.CreateBillingData;
import com.abacatepay.model.billing.CreateBillingResponse;
import com.abacatepay.model.billing.ListBillingResponse;
import feign.FeignException;
import feign.RequestInterceptor;

public class AbacatePay implements IAbacatePay {

    private static final String API_BASE_URL = "https://api.abacatepay.com/v1";

    private final AbacatePayClient client;
    private final String apiKey;
    private final String userAgent;

    public AbacatePay(String apiKey) {
        this.apiKey = apiKey;
        this.client = AbacatePayClientFactory.create(API_BASE_URL, requestInterceptor());

        //TODO: Pegar a versão do SDK dinamicamente
        this.userAgent = "Java SDK (1.0.0)";
    }

    private RequestInterceptor requestInterceptor() {
        return template -> {
            if (apiKey == null || apiKey.isEmpty()) {
                throw new IllegalArgumentException("API key not provided");
            }

            template.header("Authorization", "Bearer " + apiKey);
            template.header("Content-Type", "application/json");
            template.header("User-Agent", userAgent);
        };
    }

    @Override
    public IAbacatePayBilling billing() {

        class AbacatePayBilling implements IAbacatePayBilling {

            @Override
            public CreateBillingResponse create(CreateBillingData data) {
                try {
                    return client.create(data);
                } catch (IllegalArgumentException | FeignException e) {
                    return new CreateBillingResponse(e.getMessage());
                }
            }

            @Override
            public ListBillingResponse list() {
                try {
                    return client.list();
                } catch (IllegalArgumentException | FeignException e) {
                    return new ListBillingResponse(e.getMessage());
                }
            }
        }

        return new AbacatePayBilling();
    }
}



================================================
FILE: src/main/java/com/abacatepay/clients/AbacatePayClient.java
================================================
package com.abacatepay.clients;

import com.abacatepay.model.billing.CreateBillingData;
import com.abacatepay.model.billing.CreateBillingResponse;
import com.abacatepay.model.billing.ListBillingResponse;
import feign.RequestLine;

public interface AbacatePayClient {

    @RequestLine("GET /billing/list")
    ListBillingResponse list();

    @RequestLine("POST /billing/create")
    CreateBillingResponse create(CreateBillingData body);
}



================================================
FILE: src/main/java/com/abacatepay/clients/exceptions/FeignCustomException.java
================================================
package com.abacatepay.clients.exceptions;

import feign.FeignException;
import feign.Request;

public class FeignCustomException extends FeignException {
    public FeignCustomException(Integer status,String message,Request request) {
        super(status, message, request);
    }
}



================================================
FILE: src/main/java/com/abacatepay/clients/exceptions/handlers/ApiExceptionModel.java
================================================
package com.abacatepay.clients.exceptions.handlers;

import lombok.Data;

@Data
public class ApiExceptionModel {
    private String error;
}



================================================
FILE: src/main/java/com/abacatepay/clients/exceptions/handlers/CustomExceptionDecoder.java
================================================
package com.abacatepay.clients.exceptions.handlers;

import com.abacatepay.clients.exceptions.FeignCustomException;
import com.fasterxml.jackson.databind.ObjectMapper;
import feign.Response;
import feign.codec.ErrorDecoder;

import java.io.IOException;

public class CustomExceptionDecoder implements ErrorDecoder {

    private static final ErrorDecoder DECODER = new Default();
    private static final ObjectMapper MAPPER = new ObjectMapper();

    @Override
    public Exception decode(String s, Response response) {
        try {
            ApiExceptionModel exception = MAPPER.readValue(
                    response.body().asInputStream(), ApiExceptionModel.class
            );
            return new FeignCustomException(
                    response.status(), exception.getError(), response.request()
            );
        } catch (IOException e) {
            return DECODER.decode(s, response);
        }
    }
}



================================================
FILE: src/main/java/com/abacatepay/clients/factories/AbacatePayClientFactory.java
================================================
package com.abacatepay.clients.factories;

import com.abacatepay.clients.AbacatePayClient;
import com.abacatepay.clients.exceptions.handlers.CustomExceptionDecoder;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import feign.Feign;
import feign.RequestInterceptor;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;

public class AbacatePayClientFactory {

    private static final ObjectMapper MAPPER = new ObjectMapper();

    public static AbacatePayClient create(
            String baseUrl, RequestInterceptor requestInterceptor
    ) {
        MAPPER.registerModule(new JavaTimeModule());

        return Feign.builder()
                .decoder(new JacksonDecoder(MAPPER))
                .encoder(new JacksonEncoder(MAPPER))
                .errorDecoder(new CustomExceptionDecoder())
                .requestInterceptor(requestInterceptor)
                .target(AbacatePayClient.class, baseUrl);
    }
}



================================================
FILE: src/main/java/com/abacatepay/model/IAbacatePay.java
================================================
package com.abacatepay.model;

public interface IAbacatePay {
    IAbacatePayBilling billing();
}



================================================
FILE: src/main/java/com/abacatepay/model/IAbacatePayBilling.java
================================================
package com.abacatepay.model;

import com.abacatepay.model.billing.CreateBillingData;
import com.abacatepay.model.billing.CreateBillingResponse;
import com.abacatepay.model.billing.ListBillingResponse;

public interface IAbacatePayBilling {
    CreateBillingResponse create(CreateBillingData data);
    ListBillingResponse list();
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/Billing.java
================================================
package com.abacatepay.model.billing;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
public class Billing {
    private String id;
    private String url;
    private BigDecimal amount;
    private BillingStatus status;
    private Boolean devMode;
    private List<BillingMethod> methods;
    private List<Product> products;
    private BillingKind frequency;

    @JsonFormat(timezone = "America/Sao_Paulo", pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    private LocalDateTime nextBilling;

    private Customer customer;

    @JsonFormat(timezone = "America/Sao_Paulo", pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    private LocalDateTime createdAt;

    @JsonFormat(timezone = "America/Sao_Paulo", pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
    private LocalDateTime updatedAt;
}

@Data
class Product {
    private String productId;
    private Integer quantity;
}

@Data
@JsonIgnoreProperties(ignoreUnknown = true)
class Customer {
    private String id;
    private CustomerMetadata metadata;
}


================================================
FILE: src/main/java/com/abacatepay/model/billing/BillingKind.java
================================================
package com.abacatepay.model.billing;

public enum BillingKind {
    ONE_TIME
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/BillingMethod.java
================================================
package com.abacatepay.model.billing;

public enum BillingMethod {
    PIX
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/BillingStatus.java
================================================
package com.abacatepay.model.billing;

public enum BillingStatus {
    PENDING,
    EXPIRED,
    CANCELLED,
    PAID,
    REFUNDED
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/CreateBillingData.java
================================================
package com.abacatepay.model.billing;

import lombok.Builder;
import lombok.Data;

import java.util.List;

@Data
@Builder
public class CreateBillingData {
    private BillingKind frequency;
    private List<BillingMethod> methods;
    private List<CreateBillingProduct> products;
    private String returnUrl;
    private String completionUrl;
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/CreateBillingProduct.java
================================================
package com.abacatepay.model.billing;

import lombok.Builder;
import lombok.Data;

import java.math.BigDecimal;

@Data
@Builder
public class CreateBillingProduct {
    private String externalId;
    private String name;
    private Integer quantity;
    private BigDecimal price;
    private String description;
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/CreateBillingResponse.java
================================================
package com.abacatepay.model.billing;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
public class CreateBillingResponse {

    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String error;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    private Billing billing;

    public CreateBillingResponse(String error) {
        this.error = error;
    }
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/CustomerMetadata.java
================================================
package com.abacatepay.model.billing;

import lombok.Data;

@Data
public class CustomerMetadata {
    private String name;
    private String cellphone;
    private String email;
    private String taxId;
}



================================================
FILE: src/main/java/com/abacatepay/model/billing/ListBillingResponse.java
================================================
package com.abacatepay.model.billing;

import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
public class ListBillingResponse {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    private String error;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    private List<Billing> billings;

    public ListBillingResponse(String error) {
        this.error = error;
    }
}



================================================
FILE: src/test/java/com/abacatepay/AbacatePayTest.java
================================================
package com.abacatepay;

import com.abacatepay.clients.AbacatePayClient;
import com.abacatepay.model.billing.CreateBillingData;
import com.abacatepay.model.billing.CreateBillingResponse;
import com.abacatepay.model.billing.ListBillingResponse;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.lang.reflect.Field;

import static org.mockito.Mockito.*;

class AbacatePayTest {

    @Mock
    private AbacatePayClient abacatePayClient;

    @InjectMocks
    private AbacatePay abacatePay;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        abacatePay = new AbacatePay("apiKey");
        setClientMock(abacatePay, abacatePayClient);
    }

    private void setClientMock(AbacatePay abacatePay, AbacatePayClient mockClient) throws Exception {
        Field clientField = AbacatePay.class.getDeclaredField("client");
        clientField.setAccessible(true);
        clientField.set(abacatePay, mockClient);
    }

    @Test
    void shouldReturnCreateBillingResponseOnSuccess() {
        CreateBillingData data = CreateBillingData.builder().build();
        CreateBillingResponse expectedResponse = new CreateBillingResponse();

        when(abacatePayClient.create(data)).thenReturn(expectedResponse);

        CreateBillingResponse result = abacatePay.billing().create(data);
        verify(abacatePayClient, atMostOnce()).create(data);
        Assertions.assertEquals(expectedResponse, result, "Should return the expected response");
    }

    @Test
    void shouldCreateBillingThrowsAnException() {
        CreateBillingData data = CreateBillingData.builder().build();
        CreateBillingResponse expectedResponse = new CreateBillingResponse("API key not provided");

        when(abacatePayClient.create(data)).thenThrow(new IllegalArgumentException("API key not provided"));

        CreateBillingResponse result = abacatePay.billing().create(data);
        verify(abacatePayClient, atMostOnce()).create(data);
        Assertions.assertEquals(expectedResponse, result, "Should return the expected response");
    }

    @Test
    void shouldReturnBillingListResponseOnSucess() {
        ListBillingResponse expectedResponse = new ListBillingResponse();

        when(abacatePayClient.list()).thenReturn(expectedResponse);

        ListBillingResponse result = abacatePay.billing().list();
        verify(abacatePayClient, atMostOnce()).list();
        Assertions.assertEquals(expectedResponse, result, "Should return the expected response");
    }

    @Test
    void shouldListBillingThrowsAnException() {
        ListBillingResponse expectedResponse = new ListBillingResponse("API key not provided");

        when(abacatePayClient.list()).thenThrow(new IllegalArgumentException("API key not provided"));

        ListBillingResponse result = abacatePay.billing().list();
        verify(abacatePayClient, atMostOnce()).list();
        Assertions.assertEquals(expectedResponse, result, "Should return the expected response");
    }
}



================================================
FILE: src/test/java/com/abacatepay/clients/exceptions/handlers/ApiExceptionModelTest.java
================================================
package com.abacatepay.clients.exceptions.handlers;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class ApiExceptionModelTest {

    @Test
    void testErrorField() {
        ApiExceptionModel apiException = new ApiExceptionModel();
        String expectedError = "Some error occurred";

        apiException.setError(expectedError);
        String actualError = apiException.getError();

        assertEquals(expectedError, actualError, "Error field must be set correctly");
    }

    @Test
    void testToString() {
        ApiExceptionModel apiException = new ApiExceptionModel();
        String expectedError = "Some error occurred";
        apiException.setError(expectedError);

        String actualString = apiException.toString();

        assertEquals("ApiExceptionModel(error=Some error occurred)", actualString, "toString must return the correct string representation");
    }
}


================================================
FILE: src/test/java/com/abacatepay/clients/exceptions/handlers/CustomExceptionDecoderTest.java
================================================
package com.abacatepay.clients.exceptions.handlers;

import com.abacatepay.clients.exceptions.FeignCustomException;
import feign.FeignException;
import feign.Request;
import feign.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CustomExceptionDecoderTest {

    private CustomExceptionDecoder customExceptionDecoder;
    private Response mockResponse;

    @BeforeEach
    void setUp() {
        customExceptionDecoder = new CustomExceptionDecoder();
    }

    @Test
    void testDecodeReturnsFeignCustomException() {
        String errorJson = "{\"error\":\"Some error occurred\"}";
        mockResponse = Response.builder()
                .status(404)
                .body(new ByteArrayInputStream(errorJson.getBytes()), errorJson.length())
                .request(Request.create(Request.HttpMethod.GET, "http://localhost", Collections.emptyMap(), (byte[]) null, null))
                .build();

        Exception exception = customExceptionDecoder.decode("methodKey", mockResponse);

        assertEquals(FeignCustomException.class, exception.getClass(), "Exception must be FeignCustomException");
        FeignCustomException feignException = (FeignCustomException) exception;
        assertEquals(404, feignException.status(), "Status must be set correctly");
        assertEquals("Some error occurred", feignException.getMessage(), "Error message must be set correctly");
    }

    @Test
    void testDecodeHandlesMalformedJson() {
        String malformedJson = "{\"error\":\"Some error occurred\""; // Missing closing brace
        mockResponse = Response.builder()
                .status(401)
                .body(new ByteArrayInputStream(malformedJson.getBytes()), malformedJson.length())
                .request(Request.create(Request.HttpMethod.GET, "http://localhost", Collections.emptyMap(), (byte[]) null, null))
                .build();

        Exception exception = customExceptionDecoder.decode("methodKey", mockResponse);

        assertEquals(FeignException.Unauthorized.class, exception.getClass(), "Exception must be FeignException");
        FeignException feignException = (FeignException) exception;
        assertEquals(401, feignException.status(), "Status must be set correctly");
    }
}



================================================
FILE: src/test/java/com/abacatepay/model/billing/BillingKindTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BillingKindTest {

    @Test
    void testEnumValues() {
        assertEquals(1, BillingKind.values().length, "Should have only one value");
        assertEquals(BillingKind.ONE_TIME, BillingKind.valueOf("ONE_TIME"), "Should have the correct value");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/BillingMethodTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BillingMethodTest {

    @Test
    void testEnumValues() {
        assertEquals(1, BillingMethod.values().length, "Should have only one value");
        assertEquals(BillingMethod.PIX, BillingMethod.valueOf("PIX"), "Should have the correct value");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/BillingStatusTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class BillingStatusTest {

    @Test
    void testEnumValues() {
        assertEquals(5, BillingStatus.values().length, "Should have only five values");
        assertEquals(BillingStatus.PAID, BillingStatus.valueOf("PAID"), "Should have the correct value");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/BillingTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class BillingTest {

    @Test
    void testGettersAndSetters() {
        Billing billing = new Billing();
        billing.setId("billing-123");
        billing.setUrl("http://billing.url");
        billing.setAmount(BigDecimal.valueOf(100.00));
        billing.setStatus(BillingStatus.PAID);
        billing.setDevMode(true);

        assertEquals("billing-123", billing.getId(), "Id must be set correctly");
        assertEquals("http://billing.url", billing.getUrl(), "URL must be set correctly");
        assertEquals(BigDecimal.valueOf(100.00), billing.getAmount(), "Amount must be set correctly");
        assertEquals(BillingStatus.PAID, billing.getStatus(), "Status must be set correctly");
        assertTrue(billing.getDevMode(), "Dev mode must be set correctly");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/CreateBillingDataTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;

import java.util.Collections;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CreateBillingDataTest {

    @Test
    void testBuilder() {
        BillingKind frequency = BillingKind.ONE_TIME;
        BillingMethod method = BillingMethod.PIX;
        CreateBillingProduct product = CreateBillingProduct.builder().build();
        String returnUrl = "http://example.com/return";
        String completionUrl = "http://example.com/completion";

        CreateBillingData billingData = CreateBillingData.builder()
                .frequency(frequency)
                .methods(Collections.singletonList(method))
                .products(Collections.singletonList(product))
                .returnUrl(returnUrl)
                .completionUrl(completionUrl)
                .build();

        assertEquals(frequency, billingData.getFrequency(), "Frequency must be set correctly");
        assertEquals(1, billingData.getMethods().size(), "Methods must be set correctly");
        assertEquals(method, billingData.getMethods().get(0), "Method must be set correctly");
        assertEquals(1, billingData.getProducts().size(), "Products must be set correctly");
        assertEquals(product, billingData.getProducts().get(0), "Product must be set correctly");
        assertEquals(returnUrl, billingData.getReturnUrl(), "Return URL must be set correctly");
        assertEquals(completionUrl, billingData.getCompletionUrl(), "Completion URL must be set correctly");
    }

    @Test
    void testSettersAndGetters() {
        CreateBillingData billingData = CreateBillingData.builder().build();
        BillingKind frequency = BillingKind.ONE_TIME;
        BillingMethod method = BillingMethod.PIX;
        CreateBillingProduct product = CreateBillingProduct.builder().build();
        String returnUrl = "http://example.com/return";
        String completionUrl = "http://example.com/completion";


        billingData.setFrequency(frequency);
        billingData.setMethods(Collections.singletonList(method));
        billingData.setProducts(Collections.singletonList(product));
        billingData.setReturnUrl(returnUrl);
        billingData.setCompletionUrl(completionUrl);

        assertEquals(frequency, billingData.getFrequency(), "Frequency must be set correctly");
        assertEquals(1, billingData.getMethods().size(), "Methods must be set correctly");
        assertEquals(method, billingData.getMethods().get(0), "Method must be set correctly");
        assertEquals(1, billingData.getProducts().size(), "Products must be set correctly");
        assertEquals(product, billingData.getProducts().get(0), "Product must be set correctly");
        assertEquals(returnUrl, billingData.getReturnUrl(), "Return URL must be set correctly");
        assertEquals(completionUrl, billingData.getCompletionUrl(), "Completion URL must be set correctly");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/CreateBillingProductTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.*;

class CreateBillingProductTest {

    @Test
    void testGettersAndSetters() {
        CreateBillingProduct product = CreateBillingProduct.builder()
                .externalId("ext-123")
                .name("Product 1")
                .quantity(2)
                .price(BigDecimal.valueOf(19.99))
                .description("Description of Product 1")
                .build();

        assertEquals("ext-123", product.getExternalId(), "External ID must be set correctly");
        assertEquals("Product 1", product.getName(), "Name must be set correctly");
        assertEquals(2, product.getQuantity(), "Quantity must be set correctly");
        assertEquals(BigDecimal.valueOf(19.99), product.getPrice(), "Price must be set correctly");
        assertEquals("Description of Product 1", product.getDescription(), "Description must be set correctly");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/CreateBillingResponseTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CreateBillingResponseTest {

    @Test
    void testErrorConstructor() {
        CreateBillingResponse response = new CreateBillingResponse("Error occurred");
        assertEquals("Error occurred", response.getError(), "Error field must be set correctly");
    }

    @Test
    void testGettersAndSetters() {
        CreateBillingResponse response = new CreateBillingResponse();
        response.setError("Error occurred");
        response.setBilling(null);

        assertEquals("Error occurred", response.getError(), "Error field must be set correctly");
        assertNull(response.getBilling(), "Billing field must be set correctly");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/CustomerMetadataTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class CustomerMetadataTest {

    @Test
    void testGettersAndSetters() {
        CustomerMetadata customerMetadata = new CustomerMetadata();
        customerMetadata.setName("John Doe");
        customerMetadata.setCellphone("123456789");
        customerMetadata.setEmail("john.doe@example.com");
        customerMetadata.setTaxId("12345678901");

        assertEquals("John Doe", customerMetadata.getName(), "Name field must be set correctly");
        assertEquals("123456789", customerMetadata.getCellphone(), "Cellphone field must be set correctly");
        assertEquals("john.doe@example.com", customerMetadata.getEmail(), "Email field must be set correctly");
        assertEquals("12345678901", customerMetadata.getTaxId(), "Tax ID field must be set correctly");
    }
}


================================================
FILE: src/test/java/com/abacatepay/model/billing/ListBillingResponseTest.java
================================================
package com.abacatepay.model.billing;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ListBillingResponseTest {

    @Test
    void testErrorConstructor() {
        ListBillingResponse response = new ListBillingResponse("Error occurred");
        assertEquals("Error occurred", response.getError(), "Error field must be set correctly");
    }

    @Test
    void testGettersAndSetters() {
        ListBillingResponse response = new ListBillingResponse();
        response.setError("Error occurred");
        response.setBillings(null);

        assertEquals("Error occurred", response.getError(), "Error field must be set correctly");
        assertNull(response.getBillings(), "Billings field must be set correctly");
    }
}

