Directory structure:
└── abacatepay-abacatepay-nodejs-sdk/
    ├── package.json
    ├── SECURITY.md
    ├── tsconfig.json
    ├── assets/
    ├── src/
    │   ├── constants.ts
    │   ├── exceptions.ts
    │   ├── index.ts
    │   ├── requests.ts
    │   ├── types.ts
    │   └── version.ts
    ├── test/
    │   ├── constants.test.ts
    │   ├── exceptions.test.ts
    │   ├── index.test.ts
    │   ├── requests.test.ts
    │   └── version.test.ts
    ├── .changeset/
    ├── .config/
    └── .github/

================================================
FILE: package.json
================================================
{
  "name": "abacatepay-nodejs-sdk",
  "version": "1.3.1",
  "description": "SDK para integração com a AbacatePay.",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rafaelcoelhox/abct0.git"
  },
  "keywords": ["sdk", "typescript", "abacatepay", "nodejs", "api-client"],
  "author": "Christopher Ribeiro <christo_campiglia@hotmail.com>",
  "license": "MIT",
  "files": ["dist", "README.md"],
  "scripts": {
    "prebuild": "node -p \"'/*This file is auto generated during build, DO NOT CHANGE OR MODIFY */\\n\\nexport const ABACATE_PAY_VERSION = ' + JSON.stringify(require('./package.json').version) + ';'\" > src/version.ts",
    "build": "tsup ./src --out-dir ./dist --format cjs,esm --dts --silent --no-splitting --clean",
    "lint": "biome lint . --config-path=.config/biome.json",
    "format": "biome format . --write --config-path=.config/biome.json",
    "changeset": "changeset",
    "version-packages": "changeset version",
    "prepublishOnly": "npm run build",
    "release": "changeset publish",
    "test": "jest --config=.config/jest.config.js",
    "test:coverage": "jest --config=.config/jest.config.js --coverage",
    "coverage:open": "npx open-cli coverage/lcov-report/index.html"
  },
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@changesets/changelog-github": "^0.5.1",
    "@changesets/cli": "^2.29.2",
    "@commitlint/cli": "^19.8.0",
    "@commitlint/config-conventional": "^19.8.0",
    "@types/jest": "^29.5.14",
    "jest": "^29.7.0",
    "lefthook": "^1.11.12",
    "open-cli": "^8.0.0",
    "ts-jest": "^29.3.2",
    "tsup": "^8.4.0",
    "typescript": "^5.8.3"
  }
}



================================================
FILE: SECURITY.md
================================================
# Security Policy - AbacatePay SDKs

At AbacatePay, we treat security with the highest priority. We are committed to protecting our users, partners, and the open source community that uses our SDKs.

If you identify any vulnerability in our projects, follow the guidelines below to ensure secure and efficient communication.

---

## How to Report Vulnerabilities

Send an email to: **security@abacatepay.com**

Or use the **GitHub Security Advisories** feature in the official repositories.

Please provide as much detail as possible:

- Description of the vulnerability.
- Steps to reproduce.
- Potential impact.
- Possible mitigation suggestions.

---

## What to Expect

- We will confirm receipt of your report within 48 business hours.
- We will analyze and triage the vulnerability.
- We will work on a fix within a timeframe compatible with the criticality of the issue.
- We will conduct a coordinated disclosure after the fix, ensuring that users are properly informed.

---

## Responsible Disclosure Policy

We request that you **do not publicly disclose any vulnerability** before we have had the opportunity to fix it and communicate to the community appropriately.

We value the practice of *responsible disclosure* and recognize the importance of community collaboration to keep our projects secure.

---

## Token and Credential Management

Accidental exposure of tokens, API keys, or other sensitive credentials represents a critical risk.

Everyone should follow the [Token Management Policy](/policies/TOKEN_MANAGEMENT_POLICY.md), which covers:

- Prohibitions on committing tokens.
- Use of GitHub Secrets and environment variables.
- Rapid procedures in case of leakage.

> Credential leaks must be treated with the highest priority.

---

## Acknowledgement

We thank you for your contribution to making the AbacatePay ecosystem more secure.

Every collaboration is fundamental to maintaining the integrity and trust in our open source SDKs.

---

## References

- [Internal Security Procedures](/internal/SECURITY_CHECKLIST.md)
- [Release Process](/maintainers/RELEASE_PROCESS.md)
- [Token Management Policy](/policies/TOKEN_MANAGEMENT_POLICY.md)


================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "forceConsistentCasingInFileNames": true,
    // Base Options recommended for all projects
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "es2022",
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,
    "verbatimModuleSyntax": true,
    // Enable strict type checking so you can catch bugs early
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    // Transpile our TypeScript code to JavaScript
    "module": "ES6",
    "moduleResolution": "bundler",
    "outDir": "dist",
    // Emit type declarations
    "declaration": true,
    // Include the DOM types
    "lib": [
      "es2022",
      "dom",
      "dom.iterable"
    ]
  },
  // Include the necessary files for your project
  "include": [
    "./src/**/*.ts",
    "./src/**/*.tsx"
  ],
  "exclude": [
    "node_modules"
  ]
}



================================================
FILE: src/constants.ts
================================================
import { ABACATE_PAY_VERSION } from './version';

export const BASE_URL = 'https://api.abacatepay.com/v1';
export const ABACATE_PAY_DOCS = 'https://abacatepay.readme.io/reference';
export function DEFAULT_HEADERS(apiKey: string) {
  return {
    Authorization: `Bearer ${apiKey}`,
    'Content-Type': 'application/json',
    'User-Agent': `NodeJS SDK (${ABACATE_PAY_VERSION})`,
  };
}



================================================
FILE: src/exceptions.ts
================================================
import { ABACATE_PAY_DOCS } from './constants';

/**
 * Default class for Abacate Pay exceptions and errors.
 *
 * It can be serialized to JSON through the `toJSON` method.
 */
export class AbacatePayError extends Error {
  constructor(message: string) {
    super(
      `Abacate Pay Error: ${message}\n\nPlease, refer to the documentation at: ${ABACATE_PAY_DOCS}`,
    );
    this.name = 'AbacatePayError';
  }

  toJSON() {
    return {
      name: this.name,
      message: this.message,
    };
  }
}



================================================
FILE: src/index.ts
================================================
import { AbacatePayError } from './exceptions';
import { createRequest } from './requests';
import type {
  CreateBillingData,
  CreateBillingLinkData,
  CreateBillingResponse,
  CreateCouponData,
  CreateCouponResponse,
  CreateCustomerData,
  CreateCustomerResponse,
  CreatePixQrCodeData,
  CreatePixQrCodeResponse,
  ListBillingResponse,
  ListCustomerResponse,
} from './types';

export default function AbacatePay(apiKey: string) {
  if (!apiKey) throw new AbacatePayError('API key is required!');
  const request = createRequest(apiKey);

  return {
    /**
     * Gerencie suas cobranças.
     */
    billing: {
      /**
       * Permite que você crie um link de cobrança pro seu cliente pagar você.
       *
       * @param data Dados da cobrança
       * @returns Dados da cobrança criada ou erro
       * @see https://docs.abacatepay.com/pages/payment/create
       * @example
       * ```ts
       * const billingData = {
       *   completionUrl: "https://example.com/completion",
       *   returnUrl: "https://example.com/return",
       *   frequency: "ONE_TIME",
       *   methods: ["PIX"],
       *   products: [
       *     {
       *       name: "Product Name",
       *       price: 1000,
       *       quantity: 1,
       *       externalId: "product-id",
       *       description: "Product Description",
       *     },
       *   ],
       *   customer: {
       *     name: "João da Silva",
       *     cellphone: "11999999999",
       *     email: "joaodasilva@email.com",
       *     taxId: "12345678900",
       *   },
       * };
       *
       * const abacatePay = Abacate("apiKey");
       *
       * const response = await abacatePay.billing.create(billingData);
       * /* ... * /
       */
      create(data: CreateBillingData): Promise<CreateBillingResponse> {
        return request('/billing/create', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },

      /**
       * Permite que você crie um link de cobrança sem precisar de um cliente (o cliente informa os dados dele na hora de pagar).
       *
       * @param data Dados da cobrança
       * @returns Dados da cobrança criada ou erro
       */
      createLink(data: CreateBillingLinkData): Promise<CreateBillingResponse> {
        return request('/billing/create', {
          method: 'POST',
          body: JSON.stringify({
            ...data,
            frequency: 'MULTIPLE_PAYMENTS',
          }),
        });
      },

      /**
       * Permite que você recupere uma lista de todas as cobranças criadas.
       *
       * @returns Lista de cobranças criadas ou erro
       * @see https://docs.abacatepay.com/pages/payment/list
       * @example
       * ```ts
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.billing.list();
       * /* ... * /
       */
      list(): Promise<ListBillingResponse> {
        return request('/billing/list', { method: 'GET' });
      },
    },
    /**
     * Gerencie seus clientes, aqueles que pagam você.
     */
    customer: {
      /**
       * Permite que você crie um novo cliente para a sua loja.
       *
       * @param data Dados do cliente
       * @returns Dados do cliente criado ou erro
       * @see https://docs.abacatepay.com/pages/client/create
       * @example
       * ```ts
       * const customerData = {
       *  name: 'João da Silva',
       *  cellphone: '11999999999',
       *  email: 'joaodasilva@email.com',
       *  taxId: '12345678900',
       * };
       *
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.customer.create(customerData);
       * /* ... * /
       * ```
       */
      create(data: CreateCustomerData): Promise<CreateCustomerResponse> {
        return request('/customer/create', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },
      /**
       * Permite que você recupere uma lista de todos os seus clientes.
       *
       * @returns Lista de clientes ou erro
       * @see https://docs.abacatepay.com/pages/client/list
       * @example
       * ```ts
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.customer.list();
       * /* ... * /
       */
      list(): Promise<ListCustomerResponse> {
        return request('/customer/list', { method: 'GET' });
      },
    },
    /**
     * Gerencie seus cupons de desconto.
     */
    coupon: {
      /**
       * Permite que você crie um novo cupom de desconto.
       *
       * @param data Dados do cupom
       * @returns Dados do cupom criado ou erro
       */
      create(data: CreateCouponData): Promise<CreateCouponResponse> {
        return request('/coupon/create', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },
    },
    pixQrCode: {
      /**
       * Permite que você crie um código copia-e-cola e um QRCode Pix para seu cliente fazer o pagamento.
       *
       * @param data Dados do QRCode Pix
       * @returns Dados do QRCode Pix criado ou erro
       * @see https://docs.abacatepay.com/pages/pix-qrcode/create
       * @example
       * ```ts
       * const pixQrCodeData = {
       *  amount: 1000,
       *  description: 'pagamento via AbacatePay',
       *  expiresIn: 3600,
       * };
       *
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.pixQrCode.create(pixQrCodeData);
       * /* ... * /
       * ```
       */
      create(data: CreatePixQrCodeData): Promise<CreatePixQrCodeResponse> {
        return request('/pixQrCode/create', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },
      /**
       * Checar status do pagamento do QRCode Pix.
       *
       * @param data Dados do QRCode Pix
       * @returns Dados do QRCode Pix ou erro
       * @see https://docs.abacatepay.com/pages/pix-qrcode/check
       * @example
       * ```ts
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.pixQrCode.check('pix_charabc123456789');
       * /* ... * /
       * ```
       */
      check(data: CreatePixQrCodeData): Promise<CreatePixQrCodeResponse> {
        return request('/pixQrCode/check', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },
      /**
       * Checar status do pagamento do QRCode Pix.
       *
       * @param data Simula o pagamento de um QRCode Pix criado no modo de desenvolvimento.
       * @returns Dados do QRCode Pix ou erro
       * @see https://docs.abacatepay.com/pages/pix-qrcode/simulate-payment
       * @example
       * ```ts
       * const abacatePay = Abacate('apiKey');
       *
       * const response = await abacatePay.pixQrCode.simulatePayment('pix_char_abc123456789');
       * /* ... * /
       * ```
       */
      simulatePayment(
        data: CreatePixQrCodeData,
      ): Promise<CreatePixQrCodeResponse> {
        return request('/pixQrCode/simulate-payment', {
          method: 'POST',
          body: JSON.stringify(data),
        });
      },
    },
  };
}

export { AbacatePayError };



================================================
FILE: src/requests.ts
================================================
import { BASE_URL, DEFAULT_HEADERS } from './constants';

export function createRequest(
  apiKey: string,
): <TResponse>(
  path: string,
  options: Parameters<typeof fetch>[1],
) => Promise<TResponse> {
  const defaultHeaders = DEFAULT_HEADERS(apiKey);

  return async <TResponse>(
    path: string,
    options: Parameters<typeof fetch>[1],
  ): Promise<TResponse> => {
    try {
      const response = await fetch(`${BASE_URL}${path}`, {
        ...options,
        headers: { ...defaultHeaders, ...options?.headers },
      });

      return response.json().then((data) => {
        if (!response.ok) {
          return { error: data.message } as TResponse;
        }
        return data;
      });
    } catch (error) {
      return { error: (error as Error).message } as TResponse;
    }
  };
}



================================================
FILE: src/types.ts
================================================
export type BillingStatus =
  | 'PENDING'
  | 'EXPIRED'
  | 'CANCELLED'
  | 'PAID'
  | 'REFUNDED';
export type BillingMethods = 'PIX';
export type BillingKind = 'ONE_TIME' | 'MULTIPLE_PAYMENTS';

export type IBilling = {
  /**
   * Identificador único da cobrança.
   */
  id: string;
  /**
   * URL onde o usuário pode concluir o pagamento.
   */
  url: string;
  /**
   * Valor total a ser pago em centavos.
   */
  amount: number;
  /**
   * Status atual da cobrança.
   *
   * - `PENDING`: A cobrança foi criada, mas ainda não foi paga.
   * - `EXPIRED`: A cobrança expirou e não pode mais ser paga.
   * - `CANCELLED`: A cobrança foi cancelada.
   * - `PAID`: A cobrança foi paga.
   * - `REFUNDED`: A cobrança foi paga e o valor foi devolvido ao cliente.
   */
  status: BillingStatus;
  /**
   * Indica se a cobrança foi criada em ambiente de testes.
   */
  devMode: boolean;
  /**
   * Métodos de pagamento suportados para esta cobrança.
   */
  methods: BillingMethods[];
  /**
   * Lista de produtos na cobrança.
   */
  products: { id: string; externalId: string; quantity: number }[];
  /**
   * Frequência da cobrança.
   */
  frequency: BillingKind;
  /**
   * Data e hora da próxima cobrança, ou null para cobranças únicas.
   */
  nextBilling: string | null;
  /**
   * Cliente associado à cobrança.
   */
  customer: ICustomer;
  /**
   * Metadados da cobrança.
   */
  metadata: IBillingMetadata;
  /**
   * Data e hora de criação da cobrança.
   */
  createdAt: string;
  /**
   * Data e hora da última atualização da cobrança.
   */
  updatedAt: string;
};

export type IBillingMetadata = {
  /**
   * Taxa de serviço cobrada pela AbacatePay em centavos.
   */
  fee: number;
  /**
   * URL para redirecionar o cliente caso o mesmo clique na opção "Voltar".
   */
  returnUrl: string;
  /**
   * URL para redirecionar o cliente quando o pagamento for concluído.
   */
  completionUrl: string;
};

export type CreateBillingData =
  | {
      /**
       * Define o tipo de frequência da cobrança. Atualmente, somente cobranças únicas são suportadas.
       */
      frequency: BillingKind;
      /**
       * Métodos de pagamento que serão utilizados. Atualmente, apenas PIX é suportado.
       */
      methods: BillingMethods[];
      /**
       * Lista de produtos que seu cliente está pagando.
       */
      products: {
        /**
         * O id do produto em seu sistema. Utilizamos esse id para criar seu produto na AbacatePay de forma automática, então certifique-se de que seu id é único.
         */
        externalId: string;
        /**
         * Nome do produto.
         */
        name: string;
        /**
         * Quantidade do produto sendo adquirida.
         */
        quantity: number;
        /**
         * Preço por unidade do produto em centavos. O mínimo é 100 (1 BRL).
         */
        price: number;
        /**
         * Descrição detalhada do produto. Opcional.
         */
        description?: string;
      }[];
      /**
       * URL para redirecionar o cliente caso o mesmo clique na opção "Voltar".
       */
      returnUrl: string;
      /**
       * URL para redirecionar o cliente quando o pagamento for concluído.
       */
      completionUrl: string;
      /**
       * O id de um cliente já cadastrado em sua loja.
       */
      customerId: string;
    }
  | {
      /**
       * Define o tipo de frequência da cobrança. Atualmente, somente cobranças únicas são suportadas.
       */
      frequency: BillingKind;
      /**
       * Métodos de pagamento que serão utilizados. Atualmente, apenas PIX é suportado.
       */
      methods: BillingMethods[];
      /**
       * Lista de produtos que seu cliente está pagando.
       */
      products: {
        /**
         * O id do produto em seu sistema. Utilizamos esse id para criar seu produto na AbacatePay de forma automática, então certifique-se de que seu id é único.
         */
        externalId: string;
        /**
         * Nome do produto.
         */
        name: string;
        /**
         * Quantidade do produto sendo adquirida.
         */
        quantity: number;
        /**
         * Preço por unidade do produto em centavos. O mínimo é 100 (1 BRL).
         */
        price: number;
        /**
         * Descrição detalhada do produto. Opcional.
         */
        description?: string;
      }[];
      /**
       * URL para redirecionar o cliente caso o mesmo clique na opção "Voltar".
       */
      returnUrl: string;
      /**
       * URL para redirecionar o cliente quando o pagamento for concluído.
       */
      completionUrl: string;
      /**
       * Os dados do seu cliente para criá-lo
       */
      customer: ICustomerMetadata;
    };

export type CreateBillingLinkData = Pick<
  CreateBillingData,
  'completionUrl' | 'methods' | 'products' | 'returnUrl'
> & {
  customer?: ICustomerMetadata;
  cutomerId?: string;
};

export type CreateBillingResponse =
  | {
      error: string;
      data: null;
    }
  | {
      error: null;
      data: IBilling;
    };
export type ListBillingResponse =
  | {
      error: string;
      data: null;
    }
  | {
      error: null;
      data: IBilling[];
    };

export type ICustomerMetadata = {
  /**
   * Nome completo do seu cliente
   */
  name?: string;
  /**
   * Celular do cliente
   */
  cellphone?: string;
  /**
   * E-mail do cliente
   */
  email: string;
  /**
   * CPF ou CNPJ do cliente.
   */
  taxId?: string;
};

export type ICustomer = {
  /**
   * Identificador único do cliente
   */
  id: string;
  /**
   * Dados do cliente
   */
  metadata: ICustomerMetadata;
};

export type CreateCustomerData = ICustomerMetadata;

export type CreateCustomerResponse =
  | {
      error: string;
      data: null;
    }
  | {
      error: null;
      data: ICustomer;
    };
export type ListCustomerResponse =
  | {
      error: string;
      data: null;
    }
  | {
      error: null;
      data: ICustomer[];
    };

export interface IAbacatePayBilling {
  create(data: CreateBillingData): Promise<CreateBillingResponse>;
  list(): Promise<ListBillingResponse>;
}

export interface IAbacatePayCustomerBilling {
  create(data: CreateCustomerData): Promise<CreateCustomerResponse>;
  list(): Promise<ListCustomerResponse>;
}

export type CouponStatus = 'ACTIVE' | 'DELETED' | 'DISABLED';
export type DiscountKind = 'PERCENTAGE' | 'FIXED';

export type ICoupon = {
  /**
   * Identificador único do cupom.
   */
  id: string;
  /**
   * Tipo de desconto aplicado, porcentagem ou fixo.
   */
  discountKind: DiscountKind;
  /**
   * Quantidade de desconto a ser aplicado.
   */
  discount: number;
  /**
   * Quantidade de vezes em que o cupom pode ser resgatado. -1 significa ilimitado.
   */
  maxRedeems: number;
  /**
   * Quantidade de vezes que o cupom já foi resgatado.
   */
  redeemsCount: number;
  /**
   * Status do cupom.
   */
  status: CouponStatus;
  /**
   * Indica se o cupom foi criado em ambiente de testes.
   */
  devMode: boolean;
  /**
   * Descrição do cupom.
   */
  notes?: string;
  /**
   * Metadados do cupom.
   */
  metadata: Record<string, unknown>;
  /**
   * Data e hora de criação do cupom.
   */
  createdAt: string;
  /**
   * Data e hora da última atualização do cupom.
   */
  updatedAt: string;
};

export type CreateCouponData = {
  /**
   * Identificador único do cupom.
   */
  code: string;
  /**
   * Tipo de desconto aplicado.
   */
  discountKind: DiscountKind;
  /**
   * Quantidade de desconto a ser aplicado.
   */
  discount: number;
  /**
   * Quantidade máxima de resgates do cupom. -1 significa ilimitado.
   */
  maxRedeems?: number;
  /**
   * Descrição do cupom.
   */
  notes?: string;
  /**
   * Metadados opcionais do cupom.
   */
  metadata?: Record<string, unknown>;
};

export type CreateCouponResponse =
  | {
      error: string;
    }
  | {
      error: null;
      data: ICoupon;
    };

export type ListCouponResponse =
  | {
      error: string;
    }
  | {
      error: null;
      data: ICoupon[];
    };

export interface IAbacatePayCoupon {
  create(data: CreateCouponData): Promise<CreateCouponResponse>;
  list(): Promise<ListCouponResponse>;
}

export type PixQrCodeStatus =
  | 'PENDING'
  | 'EXPIRED'
  | 'CANCELLED'
  | 'PAID'
  | 'REFUNDED';

export type IPixQrCode = {
  /**
   * Id único da cobrança
   */
  id: string;
  /**
   * Valor da cobrança em centavos (ex: 4000 = R$ 40,00)
   */
  amount: number;
  /**
   * Status da cobrança. Pode ser `PENDING`, `EXPIRED`, `CANCELLED`, `PAID`, `REFUNDED`.
   */
  status: PixQrCodeStatus;
  /**
   * Indica se a cobrança está em ambiente de testes (`true`) ou produção (`false`).
   */
  devMode: boolean;
  /**
   * Método de pagamento.
   */
  method: 'PIX';
  /**
   * Valor da cobrança em centavos (ex: 4000 = R$ 40,00)
   */
  brCode: string;
  /**
   * Código PIX (copia-e-cola) para pagamento.
   */
  brCodeBase64: string;
  /**
   * Taxa da plataforma em centavos. Exemplo: `80` significa R$ 0,80.
   */
  platformFee: 80;
  /**
   * Descrição da cobrança.
   */
  description: string;
  /**
   * Data e hora da criação da cobrança.
   */
  createdAt: string;
  /**
   * Última atualização da cobrança.
   */
  updatedAt: string;
  /**
   * Data e hora de expiração do QRCode.
   */
  expiresAt: string;
};

export type CreatePixQrCodeData = {
  /**
   * Valor da cobrança em centavos (ex: 4000 = R$ 40,00)
   */
  amount: number;
  /**
   * Quantidade de segundos para o QrCode expirar
   */
  expiresIn: number;
  /**
   * Descrição da cobrança
   */
  description: string;
  /**
   * Dados do cliente caso deseje especificar
   */
  customer?: CreateCustomerData;
};

export type CreatePixQrCodeResponse =
  | {
      error: string;
    }
  | {
      error: null;
      data: IPixQrCode;
    };

export interface IAbacatePay {
  billing: IAbacatePayBilling;
  customer: IAbacatePayCustomerBilling;
  coupon: IAbacatePayCoupon;
  pixQrCode: IPixQrCode;
}



================================================
FILE: src/version.ts
================================================
/*This file is auto generated during build, DO NOT CHANGE OR MODIFY */

export const ABACATE_PAY_VERSION = "1.3.1";



================================================
FILE: test/constants.test.ts
================================================
// constants.test.ts
import { BASE_URL, ABACATE_PAY_DOCS, DEFAULT_HEADERS } from "../src/constants";
import { ABACATE_PAY_VERSION } from "../src/version";

describe("Constants", () => {
  describe("BASE_URL", () => {
    it("should have correct API base URL", () => {
      expect(BASE_URL).toBe("https://api.abacatepay.com/v1");
    });
  });

  describe("ABACATE_PAY_DOCS", () => {
    it("should have correct documentation URL", () => {
      expect(ABACATE_PAY_DOCS).toBe("https://abacatepay.readme.io/reference");
    });
  });

  describe("DEFAULT_HEADERS", () => {
    it("should return headers with Authorization, Content-Type and User-Agent", () => {
      const apiKey = "test-api-key";
      const headers = DEFAULT_HEADERS(apiKey);

      expect(headers).toEqual({
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
        "User-Agent": `NodeJS SDK (${ABACATE_PAY_VERSION})`,
      });
    });
  });
});



================================================
FILE: test/exceptions.test.ts
================================================
// exceptions.test.ts
import { AbacatePayError } from "../src/exceptions";
import { ABACATE_PAY_DOCS } from "../src/constants";

describe("AbacatePayError", () => {
  it("should create error with correct name", () => {
    const error = new AbacatePayError("Test error");
    expect(error.name).toBe("AbacatePayError");
  });

  it("should format message with documentation link", () => {
    const errorMessage = "Test error";
    const error = new AbacatePayError(errorMessage);
    expect(error.message).toBe(
      `Abacate Pay Error: ${errorMessage}\n\nPlease, refer to the documentation at: ${ABACATE_PAY_DOCS}`,
    );
  });

  it("should be serializable to JSON", () => {
    const errorMessage = "Test error";
    const error = new AbacatePayError(errorMessage);
    const jsonError = error.toJSON();

    expect(jsonError).toEqual({
      name: "AbacatePayError",
      message: `Abacate Pay Error: ${errorMessage}\n\nPlease, refer to the documentation at: ${ABACATE_PAY_DOCS}`,
    });
  });
});



================================================
FILE: test/index.test.ts
================================================
// index.test.ts
import AbacatePay, { AbacatePayError } from "../src/index";
import { createRequest } from "../src/requests";

// Mocking the createRequest module
jest.mock("../src/requests", () => ({
  createRequest: jest.fn(),
}));

describe("AbacatePay", () => {
  const apiKey = "test-api-key";
  const mockRequest = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (createRequest as jest.Mock).mockReturnValue(mockRequest);
  });

  it("should throw AbacatePayError if apiKey is not provided", () => {
    expect(() => AbacatePay("")).toThrow(AbacatePayError);
    expect(() => AbacatePay("")).toThrow("API key is required!");
  });

  it("should initialize correctly with valid API key", () => {
    const sdk = AbacatePay(apiKey);

    expect(createRequest).toHaveBeenCalledWith(apiKey);
    expect(sdk).toHaveProperty("billing");
    expect(sdk).toHaveProperty("customer");
    expect(sdk).toHaveProperty("coupon");
    expect(sdk).toHaveProperty("pixQrCode");
  });

  describe("billing", () => {
    it("should have create method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const billingData = {
        frequency: "ONE_TIME" as const,
        methods: ["PIX" as const],
        products: [
          {
            externalId: "product-1",
            name: "Test Product",
            quantity: 1,
            price: 1000,
          },
        ],
        returnUrl: "https://return.url",
        completionUrl: "https://completion.url",
        customer: {
          email: "test@example.com",
        },
      };

      mockRequest.mockResolvedValue({ data: "billing-created" });

      const result = await sdk.billing.create(billingData);

      expect(mockRequest).toHaveBeenCalledWith("/billing/create", {
        method: "POST",
        body: JSON.stringify(billingData),
      });
      expect(result).toEqual({ data: "billing-created" });
    });

    it("should have createLink method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const billingLinkData = {
        methods: ["PIX" as const],
        products: [
          {
            externalId: "product-1",
            name: "Test Product",
            quantity: 1,
            price: 1000,
          },
        ],
        returnUrl: "https://return.url",
        completionUrl: "https://completion.url",
      };

      mockRequest.mockResolvedValue({ data: "billing-link-created" });

      const result = await sdk.billing.createLink(billingLinkData);

      expect(mockRequest).toHaveBeenCalledWith("/billing/create", {
        method: "POST",
        body: JSON.stringify({
          ...billingLinkData,
          frequency: "MULTIPLE_PAYMENTS",
        }),
      });
      expect(result).toEqual({ data: "billing-link-created" });
    });

    it("should have list method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      mockRequest.mockResolvedValue({ data: ["billing1", "billing2"] });

      const result = await sdk.billing.list();

      expect(mockRequest).toHaveBeenCalledWith("/billing/list", {
        method: "GET",
      });
      expect(result).toEqual({ data: ["billing1", "billing2"] });
    });
  });

  describe("customer", () => {
    it("should have create method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const customerData = {
        name: "Test Customer",
        email: "test@example.com",
        cellphone: "1234567890",
        taxId: "12345678900",
      };

      mockRequest.mockResolvedValue({ data: "customer-created" });

      const result = await sdk.customer.create(customerData);

      expect(mockRequest).toHaveBeenCalledWith("/customer/create", {
        method: "POST",
        body: JSON.stringify(customerData),
      });
      expect(result).toEqual({ data: "customer-created" });
    });

    it("should have list method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      mockRequest.mockResolvedValue({ data: ["customer1", "customer2"] });

      const result = await sdk.customer.list();

      expect(mockRequest).toHaveBeenCalledWith("/customer/list", {
        method: "GET",
      });
      expect(result).toEqual({ data: ["customer1", "customer2"] });
    });
  });

  describe("coupon", () => {
    it("should have create method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const couponData = {
        code: "TEST10",
        discountKind: "PERCENTAGE" as const,
        discount: 10,
      };

      mockRequest.mockResolvedValue({ data: "coupon-created" });

      const result = await sdk.coupon.create(couponData);

      expect(mockRequest).toHaveBeenCalledWith("/coupon/create", {
        method: "POST",
        body: JSON.stringify(couponData),
      });
      expect(result).toEqual({ data: "coupon-created" });
    });
  });

  describe("pixQrCode", () => {
    it("should have create method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const pixQrCodeData = {
        amount: 1000,
        expiresIn: 3600,
        description: "Test payment",
      };

      mockRequest.mockResolvedValue({ data: "pix-qrcode-created" });

      const result = await sdk.pixQrCode.create(pixQrCodeData);

      expect(mockRequest).toHaveBeenCalledWith("/pixQrCode/create", {
        method: "POST",
        body: JSON.stringify(pixQrCodeData),
      });
      expect(result).toEqual({ data: "pix-qrcode-created" });
    });

    it("should have check method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const pixQrCodeData = {
        amount: 1000,
        expiresIn: 3600,
        description: "Test payment",
      };

      mockRequest.mockResolvedValue({ data: "pix-qrcode-status" });

      const result = await sdk.pixQrCode.check(pixQrCodeData);

      expect(mockRequest).toHaveBeenCalledWith("/pixQrCode/check", {
        method: "POST",
        body: JSON.stringify(pixQrCodeData),
      });
      expect(result).toEqual({ data: "pix-qrcode-status" });
    });

    it("should have simulatePayment method that calls request with correct parameters", async () => {
      const sdk = AbacatePay(apiKey);
      const pixQrCodeData = {
        amount: 1000,
        expiresIn: 3600,
        description: "Test payment",
      };

      mockRequest.mockResolvedValue({ data: "pix-qrcode-payment-simulated" });

      const result = await sdk.pixQrCode.simulatePayment(pixQrCodeData);

      expect(mockRequest).toHaveBeenCalledWith("/pixQrCode/simulate-payment", {
        method: "POST",
        body: JSON.stringify(pixQrCodeData),
      });
      expect(result).toEqual({ data: "pix-qrcode-payment-simulated" });
    });
  });
});



================================================
FILE: test/requests.test.ts
================================================
// requests.test.ts
import { createRequest } from "../src/requests";
import { BASE_URL, DEFAULT_HEADERS } from "../src/constants";

// Mocking fetch
global.fetch = jest.fn();

describe("createRequest", () => {
  const apiKey = "test-api-key";
  const path = "/test-path";
  const mockResponse = { data: "test-data" };
  const mockJsonPromise = Promise.resolve(mockResponse);
  const mockFetchPromise = Promise.resolve({
    ok: true,
    json: () => mockJsonPromise,
  });

  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();
    (fetch as jest.Mock).mockReturnValue(mockFetchPromise);
  });

  it("should call fetch with correct URL and headers", async () => {
    const request = createRequest(apiKey);
    const options = { method: "GET" };

    await request(path, options);

    expect(fetch).toHaveBeenCalledWith(`${BASE_URL}${path}`, {
      ...options,
      headers: DEFAULT_HEADERS(apiKey),
    });
  });

  it("should merge custom headers with default headers", async () => {
    const request = createRequest(apiKey);
    const customHeaders = { "Custom-Header": "custom-value" };
    const options = {
      method: "GET",
      headers: customHeaders,
    };

    await request(path, options);

    expect(fetch).toHaveBeenCalledWith(`${BASE_URL}${path}`, {
      ...options,
      headers: { ...DEFAULT_HEADERS(apiKey), ...customHeaders },
    });
  });

  it("should return JSON data when response is ok", async () => {
    const request = createRequest(apiKey);
    const result = await request(path, { method: "GET" });

    expect(result).toEqual(mockResponse);
  });

  it("should return error object when response is not ok", async () => {
    const errorMessage = "Error message";
    const errorResponse = { message: errorMessage };
    const errorJsonPromise = Promise.resolve(errorResponse);
    const errorFetchPromise = Promise.resolve({
      ok: false,
      json: () => errorJsonPromise,
    });

    (fetch as jest.Mock).mockReturnValue(errorFetchPromise);

    const request = createRequest(apiKey);
    const result = await request(path, { method: "GET" });

    expect(result).toEqual({ error: errorMessage });
  });

  it("should handle fetch errors", async () => {
    const errorMessage = "Network error";
    (fetch as jest.Mock).mockRejectedValue(new Error(errorMessage));

    const request = createRequest(apiKey);
    const result = await request(path, { method: "GET" });

    expect(result).toEqual({ error: errorMessage });
  });
});



================================================
FILE: test/version.test.ts
================================================
// version.test.ts
import { ABACATE_PAY_VERSION } from "../src/version";

describe("Version", () => {
  it("should export a valid version string", () => {
    expect(ABACATE_PAY_VERSION).toBeDefined();
    expect(typeof ABACATE_PAY_VERSION).toBe("string");
    // Verifica se a versão segue o formato de versionamento semântico (x.y.z)
    expect(ABACATE_PAY_VERSION).toMatch(/^\d+\.\d+\.\d+$/);
  });
});





